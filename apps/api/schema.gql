enum ChallengeStatus {
  DRAFT
  LIVE
  ARCHIVED
}

enum UserRole {
  FAN
  CREATOR
  OPERATOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING_VERIFICATION
}

type ChallengeSummary {
  id: String!
  title: String!
  tagline: String!
  raised: Int!
  goal: Int!
  currency: String!
  status: ChallengeStatus!
  updatedAt: DateTime!
  version: Int!
}

type ChallengeStatusBreakdown {
  draft: Int!
  live: Int!
  archived: Int!
}

type ChallengeListAnalytics {
  totalChallenges: Int!
  totalRaised: Int!
  totalGoal: Int!
  averageCompletion: Float!
  statusBreakdown: ChallengeStatusBreakdown!
}

type ChallengePageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type ChallengeEdge {
  cursor: String!
  node: ChallengeSummary!
}

type ChallengeList {
  edges: [ChallengeEdge!]!
  pageInfo: ChallengePageInfo!
  analytics: ChallengeListAnalytics!
}

type Challenge {
  id: String!
  title: String!
  tagline: String!
  raised: Int!
  goal: Int!
  currency: String!
  status: ChallengeStatus!
  updatedAt: DateTime!
  version: Int!
  description: String!
  createdAt: DateTime!
}

type Health {
  status: String!
  service: String!
  uptime: Float!
}

type ViewerUser {
  id: String!
  email: String!
  phone: String
  displayName: String!
  roles: [UserRole!]!
  permissions: [String!]!
  status: UserStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ViewerSession {
  id: String!
  issuedAt: DateTime!
  expiresAt: DateTime!
  ipAddress: String
  userAgent: String
  status: String!
}

type Viewer {
  user: ViewerUser
  session: ViewerSession
}

input ChallengeListFilterInput {
  status: ChallengeStatus
  search: String
}

input ChallengeListInput {
  first: Int
  after: String
  filter: ChallengeListFilterInput
}

input CreateChallengeInput {
  id: String!
  title: String!
  tagline: String!
  description: String!
  goal: Int!
  currency: String
  status: ChallengeStatus
}

input UpdateChallengeInput {
  id: String!
  expectedVersion: Int!
  title: String
  tagline: String
  description: String
  goal: Int
  currency: String
  status: ChallengeStatus
}

input ArchiveChallengeInput {
  id: String!
  expectedVersion: Int!
}

type Query {
  featuredChallenges(status: String, limit: Int): [ChallengeSummary!]!
  challenges(status: String, limit: Int): [ChallengeSummary!]!
  challengeAdminList(input: ChallengeListInput): ChallengeList!
  challenge(id: String!): Challenge
  health: Health!
  viewer: Viewer!
}

type Mutation {
  createChallenge(input: CreateChallengeInput!): Challenge!
  updateChallenge(input: UpdateChallengeInput!): Challenge!
  archiveChallenge(input: ArchiveChallengeInput!): Challenge!
}

scalar DateTime
