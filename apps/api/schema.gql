enum ChallengeStatus {
  DRAFT
  LIVE
  ARCHIVED
}

enum UserRole {
  FAN
  CREATOR
  OPERATOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING_VERIFICATION
}

enum SubmissionState {
  PENDING
  APPROVED
  REJECTED
  REMOVED
}

type ChallengeSummary {
  id: String!
  title: String!
  tagline: String!
  raised: Int!
  goal: Int!
  currency: String!
  status: ChallengeStatus!
  updatedAt: DateTime!
  version: Int!
}

type ChallengeStatusBreakdown {
  draft: Int!
  live: Int!
  archived: Int!
}

type ChallengeListAnalytics {
  totalChallenges: Int!
  totalRaised: Int!
  totalGoal: Int!
  averageCompletion: Float!
  statusBreakdown: ChallengeStatusBreakdown!
}

type ChallengePageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type ChallengeEdge {
  cursor: String!
  node: ChallengeSummary!
}

type ChallengeList {
  edges: [ChallengeEdge!]!
  pageInfo: ChallengePageInfo!
  analytics: ChallengeListAnalytics!
}

type Challenge {
  id: String!
  title: String!
  tagline: String!
  raised: Int!
  goal: Int!
  currency: String!
  status: ChallengeStatus!
  updatedAt: DateTime!
  version: Int!
  description: String!
  createdAt: DateTime!
  submissions: SubmissionConnection
}

type TikTokAccount {
  id: String!
  username: String!
  displayName: String
  avatarUrl: String
  scopes: [String!]!
  accessTokenExpiresAt: DateTime!
  refreshTokenExpiresAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TikTokEmbed {
  provider: String!
  html: String!
  scriptUrl: String!
  width: Int
  height: Int
  thumbnailUrl: String
  authorName: String
  authorUrl: String
}

type VideoMetrics {
  likeCount: Int!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
}

type Video {
  id: String!
  tiktokVideoId: String!
  ownerAccountId: String!
  shareUrl: String!
  caption: String
  postedAt: DateTime
  embed: TikTokEmbed!
  metrics: VideoMetrics!
  lastRefreshedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: TikTokAccount!
}

type VideoEdge {
  cursor: String!
  node: Video!
}

type VideoPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type VideoConnection {
  edges: [VideoEdge!]!
  pageInfo: VideoPageInfo!
}

type Submission {
  id: String!
  challengeId: String!
  creatorUserId: String!
  videoId: String!
  state: SubmissionState!
  rejectionReason: String
  createdAt: DateTime!
  updatedAt: DateTime!
  video: Video!
}

type SubmissionEdge {
  cursor: String!
  node: Submission!
}

type SubmissionPageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type SubmissionConnection {
  edges: [SubmissionEdge!]!
  pageInfo: SubmissionPageInfo!
}

type Health {
  status: String!
  service: String!
  uptime: Float!
}

type ViewerUser {
  id: String!
  email: String
  phone: String
  displayName: String!
  avatarUrl: String
  tiktokUserId: String
  tiktokUsername: String
  tiktokScopes: [String!]!
  roles: [UserRole!]!
  permissions: [String!]!
  status: UserStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ViewerSession {
  id: String!
  userId: String!
  rolesSnapshot: [String!]!
  issuedAt: DateTime!
  expiresAt: DateTime!
  ipAddress: String
  userAgent: String
  status: String!
  deviceLabel: String
  riskLevel: String
  refreshTokenHash: String!
  metadata: ViewerSessionMetadata
}


}

type Viewer {
  user: ViewerUser
  session: ViewerSession
}

type TikTokLoginIntent {
  state: String!
  clientKey: String!
  redirectUri: String!
  scopes: [String!]!
  returnPath: String
}
input ChallengeListFilterInput {
  status: ChallengeStatus
  search: String
}

input ChallengeListInput {
  first: Int
  after: String
  filter: ChallengeListFilterInput
}

input CreateChallengeInput {
  id: String!
  title: String!
  tagline: String!
  description: String!
  goal: Int!
  currency: String
  status: ChallengeStatus
}

input UpdateChallengeInput {
  id: String!
  expectedVersion: Int!
  title: String
  tagline: String
  description: String
  goal: Int
  currency: String
  status: ChallengeStatus
}

input ArchiveChallengeInput {
  id: String!
  expectedVersion: Int!
}

input StartTikTokLoginInput {
  scopes: [String!]
  returnPath: String
  redirectUri: String
  deviceLabel: String
}

input CompleteTikTokLoginInput {
  code: String!
  state: String!
  deviceLabel: String
}

input UpdateViewerProfileInput {
  displayName: String
  phone: String
}

input SubmitToChallengeInput {
  challengeId: String!
  tiktokVideoId: String!
}

type Query {
  featuredChallenges(status: String, limit: Int): [ChallengeSummary!]!
  challenges(status: String, limit: Int): [ChallengeSummary!]!
  challengeAdminList(input: ChallengeListInput): ChallengeList!
  challenge(id: String!): Challenge
  creatorVideos(first: Int, after: String): VideoConnection!
  health: Health!
  viewer: Viewer!
  viewerSessions: [ViewerSession!]!
}

type Mutation {
  createChallenge(input: CreateChallengeInput!): Challenge!
  updateChallenge(input: UpdateChallengeInput!): Challenge!
  archiveChallenge(input: ArchiveChallengeInput!): Challenge!
  startTikTokLogin(input: StartTikTokLoginInput): TikTokLoginIntent!
  completeTikTokLogin(input: CompleteTikTokLoginInput!): Viewer!
  updateViewerProfile(input: UpdateViewerProfileInput!): ViewerUser!
  logoutSession(sessionId: String!): Viewer!
  revokeSession(sessionId: String!): ViewerSession!
  submitToChallenge(input: SubmitToChallengeInput!): Submission!
}

scalar DateTime
